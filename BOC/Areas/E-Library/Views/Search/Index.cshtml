@using DevExtreme.AspNet.Mvc
@model BOC.Areas.E_Library.Models.Search;

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_DeskTop.cshtml";
}
<style>
   
    
    .dx-scrollable {
    width: 100%
    
}
.Search_Tittle
{
width:100%;
color:red;
text-align:center;
margin-top:30px;
margin-bottom:20px;
background-color:white
}
.Search_Row{
    width:60%;
    margin-left:auto;
    margin-right:auto;
    background-color:white;
    display:flex;
    margin-top:10px;
    margin-bottom:10px
}
.Search_Row_Inside
{
width:100%;
background-color:white;
display:flex
}
.Search_Row_Inside_Text{
    flex:50%;
    background-color:white;
    text-align:center;
    font-size:18px;
    transform: translate(0px,8px)
}
.btn_search{
    float:right;
    background-color:#4682B4;
    border-radius:10px;
    padding:10px
}
#btnseach{
    padding:10px 20px;margin-bottom:20px;
    background-image: linear-gradient(green,darkgreen)!important;

}
#btnseach:hover{
    background-color:blue;
    background-image: linear-gradient(green,#66FF66)!important;
  
}


.dx-scrollable {
    width: 350px
    
}


</style>

@using (Html.BeginForm("SearchResult", "Search", FormMethod.Post)) {
<h4 class="Search_Tittle">Tìm kiếm tài liệu / Document search area</h4>

<div class="Search_Row">
<div class="Search_Row_Inside">
<div  class="Search_Row_Inside_Text">Từ khóa / Key search</div>
<input style="flex:50%;" name="KeySearch" type="text" class="form-control" placeholder="Nhập Từ khóa/ Typing Key search" />
</div>
</div>
 
<div class="Search_Row">
<div class="Search_Row_Inside">
<div class="Search_Row_Inside_Text">Ngày phát hành / Publish date</div>
<div style="flex:24%;background-color:white">@(Html.DevExtreme().DateBoxFor(m=>m.ReceivedDate)
                .Type(DateBoxType.Date)
                .Value(string.Empty)
            )</div>
<div style="flex:2%"></div>
<div style="flex:24%;background-color:white"> @(Html.DevExtreme().DateBoxFor(m=>m.PublishDate)
                .Type(DateBoxType.Date)
                .Value(string.Empty)
            )</div>
</div>
</div>
<div class="Search_Row">
<div class="Search_Row_Inside">
<div class="Search_Row_Inside_Text">ISBN</div><input style="flex:50%;background-color:white" name="isdn" type="text" class="form-control" placeholder="Nhập ISBN/ Typing ISBN"/>
</div>
</div>    

<div class="Search_Row">
<div class="Search_Row_Inside">
<div  class="Search_Row_Inside_Text">Tác giả / Author</div><input style="flex:50%;background-color:white" name="Author" type="text" class="form-control" placeholder="Nhập tác giả/ Typing Author">
</div>
</div>  
  
<div class="Search_Row">
<div class="Search_Row_Inside">
<div class="Search_Row_Inside_Text">Đơn vị nhập liệu / Input division</div>
<div style="flex:50%">
     @(Html.DevExtreme().DropDownBoxFor(m=>m.DocDivID)
                
                .ValueExpr("DocDivID")
                .DisplayExpr(new JS("gridBox_displayExpr"))
                .DataSource(d => d.Mvc()
                    .Controller("Search")
                    .LoadAction("Get")
                    .LoadMode(DataSourceLoadMode.Raw)
                    .Key("DocDivID")
                )
                .Placeholder("")
                .ShowClearButton(true)
                .OnValueChanged("gridBox_valueChanged")
                .ContentTemplate(new TemplateName("EmbeddedDataGridSingle"))
            )

@using(Html.DevExtreme().NamedTemplate("EmbeddedDataGridSingle")) {
    @(Html.DevExtreme().DataGrid()
        .ID("embedded-datagrid")
        .DataSource(new JS(@"component.getDataSource()"))
        .Columns(columns => {
           @* columns.Add().DataField("CompanyName");*@
            columns.Add().DataField("DivisionCode");
            columns.Add().DataField("DivisionName");
        })
        .HoverStateEnabled(true)
        .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
        .Height(345)
        .Selection(s => s.Mode(SelectionMode.Single))
        .SelectedRowKeys(new JS(@"component.option(""value"") ? [component.option(""value"")] : []"))
        .OnSelectionChanged(@<text>
            function(selectedItems) {
                var keys = selectedItems.selectedRowKeys;
                component.option("value", keys);
                component.close();
            }
        </text>)
    )
}
<script>
    function gridBox_valueChanged(e) {
        var $dataGrid = $("#embedded-datagrid");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);
        }
    }

    function gridBox_displayExpr(item) {
      return  item.DivisionName 
        //return item && item.DivisionCode + " <" + item.DivisionName + ">";
         //return item.DocDivID 
    }
</script>                
</div>
</div>
</div>  
<div class="Search_Row">
<div class="Search_Row_Inside">
<div class="Search_Row_Inside_Text">Đơn vị phát hành / Issuing unit</div>
<div style="flex:50%" >
    @(Html.DevExtreme().DropDownBoxFor(m=>m.PublishID)
                .ValueExpr("PublishID")
                .DisplayExpr(new JS("gridBox_displayExpr1"))
                .DataSource(d => d.Mvc()
                    .Controller("Search")
                    .LoadAction("GetIssue")
                    .LoadMode(DataSourceLoadMode.Raw)
                    .Key("PublishID")
                )
                .Placeholder("")
                .ShowClearButton(true)
                .OnValueChanged("gridBox_valueChanged")
                .ContentTemplate(new TemplateName("EmbeddedDataGridSingle1"))
            )

@using(Html.DevExtreme().NamedTemplate("EmbeddedDataGridSingle1")) {
    @(Html.DevExtreme().DataGrid()
        .ID("embedded-datagrid1")
        .DataSource(new JS(@"component.getDataSource()"))
        .Columns(columns => {
           @* columns.Add().DataField("CompanyName");*@
            columns.Add().DataField("PublishCode");
            columns.Add().DataField("PublishName");
        })
        .HoverStateEnabled(true)
        .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
        .Height(345)
        .Selection(s => s.Mode(SelectionMode.Single))
        .SelectedRowKeys(new JS(@"component.option(""value"") ? [component.option(""value"")] : []"))
        .OnSelectionChanged(@<text>
            function(selectedItems) {
                var keys = selectedItems.selectedRowKeys;
                component.option("value", keys);
                component.close();
            }
        </text>)
    )
}
<script>
    function gridBox_valueChanged(e) {
        var $dataGrid = $("#embedded-datagrid1");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);

        }
    }

    function gridBox_displayExpr1(item) {
      return  item.PublishName 
        //return item && item.DivisionCode + " <" + item.DivisionName + ">";
         //return item.DocDivID 
    }
   
</script>
       
</div>
</div>
</div>  
<div class="Search_Row">
<div class="Search_Row_Inside">
<div style="flex:50%"></div>
<div style="flex:50%;background-color:white" >
 <div class="form-check">
  @Html.CheckBoxFor(m => m.CheckRead, new {@class="form-check-input",@checked = "checked"})
  <label class="form-check-label" style="font-size:18px">Chưa đọc / Unread</label>
</div></div>
</div>
</div>
<div class="Search_Row">
<div class="Search_Row_Inside">
<div style="flex:50%"></div>
<div style="flex:50%;background-color:white" >
 <div class="form-check">
  @Html.CheckBoxFor(m => m.CheckNews, new {@class="form-check-input" })
  <label class="form-check-label" style="font-size:18px">Mới nhất (trong vòng 30 ngày gần đây) /

Newest (from 30 days or earlier)</label>
</div></div>
</div>
</div>
<div class="Search_Row" >
<div class="Search_Row_Inside">
<div style="flex:50%"></div>
<div style="flex:50%;background-color:white" >
<input type="submit" id="btnseach" style=""  value="Tìm Kiếm / Search" class="btn btn-primary btn_search"  />
</div>
</div>

</div>
       
}









 